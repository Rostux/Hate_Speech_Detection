{"cells":[{"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"cell_type":"code","source":"\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","trusted":true},"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport nltk\nfrom sklearn.preprocessing import LabelBinarizer\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom wordcloud import WordCloud,STOPWORDS\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.tokenize import word_tokenize,sent_tokenize\nfrom bs4 import BeautifulSoup\nimport re,string,unicodedata\nfrom keras.preprocessing import text, sequence\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom string import punctuation\nfrom nltk import pos_tag\nfrom nltk.corpus import wordnet\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Embedding,LSTM,Dropout\nfrom keras.callbacks import ReduceLROnPlateau\nimport tensorflow as tf","execution_count":1,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"\n\nbatch_size = 256\nepochs = 10\nembed_size = 100\n\n","execution_count":2,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"import pandas as pd\ntest2=pd.read_csv('../input/hate-speech-detection/toxic_test.csv')\ntrain2=pd.read_csv('../input/hate-speech-detection/toxic_train.csv')","execution_count":3,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"del test2['Unnamed: 0']\ndel train2['Unnamed: 0']\n","execution_count":4,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"train2['text']=train2['comment_text']\ntest2['text']=test2['comment_text']\ndel train2['comment_text']\ndel test2['comment_text']\n","execution_count":5,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"test2.head()\n","execution_count":6,"outputs":[{"output_type":"execute_result","execution_count":6,"data":{"text/plain":"   toxic                                               text\n0      0  Thank you for understanding. I think very high...\n1      0                   :Dear god this site is horrible.\n2      0  \"::: Somebody will invariably try to add Relig...\n3      0  \" \\r\\n\\r\\n It says it right there that it IS a...\n4      0  \" \\r\\n\\r\\n == Before adding a new product to t...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>toxic</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>Thank you for understanding. I think very high...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>:Dear god this site is horrible.</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>\"::: Somebody will invariably try to add Relig...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>\" \\r\\n\\r\\n It says it right there that it IS a...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>\" \\r\\n\\r\\n == Before adding a new product to t...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"train2.head()","execution_count":7,"outputs":[{"output_type":"execute_result","execution_count":7,"data":{"text/plain":"   toxic                                               text\n0      0  Explanation\\r\\nWhy the edits made under my use...\n1      0  D'aww! He matches this background colour I'm s...\n2      0  Hey man, I'm really not trying to edit war. It...\n3      0  \"\\r\\nMore\\r\\nI can't make any real suggestions...\n4      0  You, sir, are my hero. Any chance you remember...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>toxic</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>Explanation\\r\\nWhy the edits made under my use...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>D'aww! He matches this background colour I'm s...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>Hey man, I'm really not trying to edit war. It...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>\"\\r\\nMore\\r\\nI can't make any real suggestions...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>You, sir, are my hero. Any chance you remember...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"from nltk.corpus import stopwords\nimport re,string,unicodedata\nstop = set(stopwords.words('english'))\npunctuation = list(string.punctuation)\nstop.update(punctuation)\n","execution_count":8,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"from bs4 import BeautifulSoup\ndef strip_html(text):\n    soup = BeautifulSoup(text, \"html.parser\")\n    return soup.get_text()\n\n#Removing the square brackets\ndef remove_between_square_brackets(text):\n    return re.sub('\\[[^]]*\\]', '', text)\n# Removing URL's\ndef remove_between_square_brackets(text):\n    return re.sub(r'http\\S+', '', text)\n#Removing the stopwords from text\ndef remove_stopwords(text):\n    final_text = []\n    for i in text.split():\n        if i.strip().lower() not in stop:\n            final_text.append(i.strip())\n    return \" \".join(final_text)\ndef lowering(text):\n    text=text.lower() \n    return text\n\n#Removing the noisy text\ndef denoise_text(text):\n    text = strip_html(text)\n    text = remove_between_square_brackets(text)\n    text = remove_stopwords(text)\n    text =lowering(text)\n    return text\n\n","execution_count":9,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"test2['text']=test2['text'].apply(denoise_text)\ntest2","execution_count":10,"outputs":[{"output_type":"stream","text":"/opt/conda/lib/python3.7/site-packages/bs4/__init__.py:398: UserWarning: \"http://en.wikipedia.org/wiki/Half-Life_%28series%29\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n  markup\n/opt/conda/lib/python3.7/site-packages/bs4/__init__.py:398: UserWarning: \"http://es.wikipedia.org/wiki/Usuario_Discusi%C3%B3n:Sarah_W.\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n  markup\n/opt/conda/lib/python3.7/site-packages/bs4/__init__.py:398: UserWarning: \"http://en.wikipedia.org/wiki/Rayleigh%E2%80%93B%C3%A9nard_convection\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n  markup\n","name":"stderr"},{"output_type":"execute_result","execution_count":10,"data":{"text/plain":"       toxic                                               text\n0          0  thank understanding. think highly would revert...\n1          0                           :dear god site horrible.\n2          0  \"::: somebody invariably try add religion? rea...\n3          0  says right type. \"\"type\"\" institution needed c...\n4          0  == adding new product list, make sure relevant...\n...      ...                                                ...\n63973      0  :jerome, see never got around this…! i’m surpr...\n63974      0  ==lucky bastard== heh famous now. kida envy th...\n63975      0      ==shame all!!!== want speak gays romanians...\n63976      1  mel gibson nazi bitch makes shitty movies. muc...\n63977      0  == unicorn lair discovery == supposedly, 'unic...\n\n[63978 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>toxic</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>thank understanding. think highly would revert...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>:dear god site horrible.</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>\"::: somebody invariably try add religion? rea...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>says right type. \"\"type\"\" institution needed c...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>== adding new product list, make sure relevant...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>63973</th>\n      <td>0</td>\n      <td>:jerome, see never got around this…! i’m surpr...</td>\n    </tr>\n    <tr>\n      <th>63974</th>\n      <td>0</td>\n      <td>==lucky bastard== heh famous now. kida envy th...</td>\n    </tr>\n    <tr>\n      <th>63975</th>\n      <td>0</td>\n      <td>==shame all!!!== want speak gays romanians...</td>\n    </tr>\n    <tr>\n      <th>63976</th>\n      <td>1</td>\n      <td>mel gibson nazi bitch makes shitty movies. muc...</td>\n    </tr>\n    <tr>\n      <th>63977</th>\n      <td>0</td>\n      <td>== unicorn lair discovery == supposedly, 'unic...</td>\n    </tr>\n  </tbody>\n</table>\n<p>63978 rows × 2 columns</p>\n</div>"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"train2['text']=train2['text'].apply(denoise_text)\ntrain2","execution_count":11,"outputs":[{"output_type":"stream","text":"/opt/conda/lib/python3.7/site-packages/bs4/__init__.py:398: UserWarning: \"http://en.wikipedia.org/wiki/Wikipedia_talk:No_original_research/archive15#YouTube_art_as_primary_source\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n  markup\n/opt/conda/lib/python3.7/site-packages/bs4/__init__.py:398: UserWarning: \"http://finance.yahoo.com/news/7-fascinating-nuggets-another-bewildering-150348488.html\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n  markup\n/opt/conda/lib/python3.7/site-packages/bs4/__init__.py:398: UserWarning: \"http://en.wikipedia.org/wiki/Wikipedia:ELYES\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n  markup\n/opt/conda/lib/python3.7/site-packages/bs4/__init__.py:398: UserWarning: \"http://www.haaretz.com/news/diplomacy-defense/2-279-calories-per-person-how-israel-made-sure-gaza-didn-t-starve.premium-1.470419\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n  markup\n","name":"stderr"},{"output_type":"execute_result","execution_count":11,"data":{"text/plain":"        toxic                                               text\n0           0  explanation edits made username hardcore metal...\n1           0  d'aww! matches background colour i'm seemingly...\n2           0  hey man, i'm really trying edit war. guy const...\n3           0  can't make real suggestions improvement wonder...\n4           0    you, sir, hero. chance remember page that's on?\n...       ...                                                ...\n159566      0  \":::::and second time asking, view completely ...\n159567      0  ashamed horrible thing put talk page. 128.61.1...\n159568      0  spitzer umm, theres actual article prostitutio...\n159569      0  looks like actually put speedy first version d...\n159570      0  ... really think understand. came idea bad rig...\n\n[159571 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>toxic</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>explanation edits made username hardcore metal...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>d'aww! matches background colour i'm seemingly...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>hey man, i'm really trying edit war. guy const...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>can't make real suggestions improvement wonder...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>you, sir, hero. chance remember page that's on?</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>159566</th>\n      <td>0</td>\n      <td>\":::::and second time asking, view completely ...</td>\n    </tr>\n    <tr>\n      <th>159567</th>\n      <td>0</td>\n      <td>ashamed horrible thing put talk page. 128.61.1...</td>\n    </tr>\n    <tr>\n      <th>159568</th>\n      <td>0</td>\n      <td>spitzer umm, theres actual article prostitutio...</td>\n    </tr>\n    <tr>\n      <th>159569</th>\n      <td>0</td>\n      <td>looks like actually put speedy first version d...</td>\n    </tr>\n    <tr>\n      <th>159570</th>\n      <td>0</td>\n      <td>... really think understand. came idea bad rig...</td>\n    </tr>\n  </tbody>\n</table>\n<p>159571 rows × 2 columns</p>\n</div>"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"x_train=train2['text']\nx_test=test2['text']\ny_train=train2['toxic']\ny_test=test2['toxic']","execution_count":12,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"max_features = 10000\nmaxlen = 300","execution_count":13,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"\ntokenizer = text.Tokenizer(num_words=max_features)\ntokenizer.fit_on_texts(x_train)\ntokenized_train = tokenizer.texts_to_sequences(x_train)\nx_train = sequence.pad_sequences(tokenized_train, maxlen=maxlen)\n\n\ntokenized_test = tokenizer.texts_to_sequences(x_test)\nX_test = sequence.pad_sequences(tokenized_test, maxlen=maxlen)\n","execution_count":14,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"EMBEDDING_FILE = '../input/glove-global-vectors-for-word-representation/glove.twitter.27B.100d.txt'","execution_count":15,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"def get_coefs(word, *arr): \n    return word, np.asarray(arr, dtype='float32')\nembeddings_index = dict(get_coefs(*o.rstrip().rsplit(' ')) for o in open(EMBEDDING_FILE))","execution_count":16,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"all_embs = np.stack(embeddings_index.values())\nemb_mean,emb_std = all_embs.mean(), all_embs.std()\nembed_size = all_embs.shape[1]\n\nword_index = tokenizer.word_index\nnb_words = min(max_features, len(word_index))\nembedding_matrix = embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size))\nfor word, i in word_index.items():\n    if i >= max_features: continue\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None: embedding_matrix[i] = embedding_vector","execution_count":17,"outputs":[{"output_type":"stream","text":"/opt/conda/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3254: FutureWarning: arrays to stack must be passed as a \"sequence\" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.\n  if (await self.run_code(code, result,  async_=asy)):\n","name":"stderr"}]},{"metadata":{"trusted":true},"cell_type":"code","source":"\n\nepochs = 10\nembed_size = 100\nfilters= 250\nkernel_size=3\nhidden_dims= 250\n\n","execution_count":18,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"from wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.preprocessing import text, sequence\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation\nfrom tensorflow.keras.layers import Embedding\nfrom tensorflow.keras.layers import Conv1D, GlobalMaxPooling1D, MaxPooling1D\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, f1_score, confusion_matrix\nimport seaborn as sns","execution_count":19,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"\nfrom wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.preprocessing import text, sequence\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation\nfrom tensorflow.keras.layers import Embedding\nfrom tensorflow.keras.layers import Conv1D, GlobalMaxPooling1D, MaxPooling1D\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, f1_score, confusion_matrix\nimport seaborn as sns\nmodel2 = Sequential()\nmodel2.add(Embedding(max_features, output_dim=embed_size, weights=[embedding_matrix], input_length=maxlen, trainable=False))\nmodel2.add(Dropout(0.2))\nmodel2.add(Conv1D(filters,\n                 kernel_size,\n                 padding='valid',\n                 activation='relu'))\nmodel2.add(MaxPooling1D())\nmodel2.add(Conv1D(filters,\n                 5,\n                 padding='valid',\n                 activation='relu'))\nmodel2.add(GlobalMaxPooling1D())\nmodel2.add(Dense(hidden_dims, activation='relu'))\nmodel2.add(Dropout(0.2))\n\nmodel2.add(Dense(1, activation='sigmoid'))\nmodel2.summary()\nmodel2.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n","execution_count":20,"outputs":[{"output_type":"stream","text":"Model: \"sequential\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nembedding (Embedding)        (None, 300, 100)          1000000   \n_________________________________________________________________\ndropout (Dropout)            (None, 300, 100)          0         \n_________________________________________________________________\nconv1d (Conv1D)              (None, 298, 250)          75250     \n_________________________________________________________________\nmax_pooling1d (MaxPooling1D) (None, 149, 250)          0         \n_________________________________________________________________\nconv1d_1 (Conv1D)            (None, 145, 250)          312750    \n_________________________________________________________________\nglobal_max_pooling1d (Global (None, 250)               0         \n_________________________________________________________________\ndense (Dense)                (None, 250)               62750     \n_________________________________________________________________\ndropout_1 (Dropout)          (None, 250)               0         \n_________________________________________________________________\ndense_1 (Dense)              (None, 1)                 251       \n=================================================================\nTotal params: 1,451,001\nTrainable params: 451,001\nNon-trainable params: 1,000,000\n_________________________________________________________________\n","name":"stdout"}]},{"metadata":{"trusted":true},"cell_type":"code","source":"hist = model2.fit(x_train,y_train,\n                    batch_size= 32,\n                    epochs=60,\n                    validation_data= (X_test,y_test)\n                    )","execution_count":null,"outputs":[{"output_type":"stream","text":"1160/4987 [=====>........................] - ETA: 26s - loss: 0.1705 - accuracy: 0.9416","name":"stdout"}]},{"metadata":{"trusted":true},"cell_type":"code","source":"y_pred = model2.predict(X_test,verbose=1,batch_size=32)\ny_pred = [0 if y[0] < 0.5 else 1 for y in y_pred]\nprint(\"Accuracy: {:.2f}%\".format(accuracy_score(y_test, y_pred) * 100))\nprint(\"F1 Score: {:.6f}\".format(f1_score(y_test, y_pred, average='macro')))\n\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"\n\n# Plot loss vs epochs\nplt.plot(hist.history['loss'], label='train')\nplt.plot(hist.history['val_loss'], label='validation')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.title('Training loss vs. Epochs')\nplt.legend()\nplt.show()\n\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# Plot accuracy vs epochs\nplt.plot(hist.history['accuracy'], label='train')\nplt.plot(hist.history['val_accuracy'], label='validation')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('Training accuracy vs. Epochs')\nplt.legend()\nplt.show()\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.7.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat":4,"nbformat_minor":4}